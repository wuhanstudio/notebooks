{
  
    
        "post0": {
            "title": "Interpretable ML - Linear Regression",
            "content": "import pandas as pd . import numpy as np np.set_printoptions(suppress=True) . Read Dataset . bike_day = pd.read_csv(&quot;dataset/bike/day.csv&quot;) . bike_day.head() . instant dteday season yr mnth holiday weekday workingday weathersit temp atemp hum windspeed casual registered cnt . 0 1 | 2011-01-01 | 1 | 0 | 1 | 0 | 6 | 0 | 2 | 0.344167 | 0.363625 | 0.805833 | 0.160446 | 331 | 654 | 985 | . 1 2 | 2011-01-02 | 1 | 0 | 1 | 0 | 0 | 0 | 2 | 0.363478 | 0.353739 | 0.696087 | 0.248539 | 131 | 670 | 801 | . 2 3 | 2011-01-03 | 1 | 0 | 1 | 0 | 1 | 1 | 1 | 0.196364 | 0.189405 | 0.437273 | 0.248309 | 120 | 1229 | 1349 | . 3 4 | 2011-01-04 | 1 | 0 | 1 | 0 | 2 | 1 | 1 | 0.200000 | 0.212122 | 0.590435 | 0.160296 | 108 | 1454 | 1562 | . 4 5 | 2011-01-05 | 1 | 0 | 1 | 0 | 3 | 1 | 1 | 0.226957 | 0.229270 | 0.436957 | 0.186900 | 82 | 1518 | 1600 | . Feature Engineering . Numerical Features . bike_day.temp = bike_day.temp * (39 - (-8)) + (-8) bike_day.atemp = bike_day.atemp * (50 - (16)) + (16) bike_day.windspeed = bike_day.windspeed * 67 bike_day.hum = bike_day.hum * 100 . Datetime . bike_start_day = pd.to_datetime(&#39;2011-01-01&#39;) bike_day[&#39;dteday&#39;] = pd.to_datetime(bike_day[&#39;dteday&#39;]) bike_day[&#39;days_since_2011&#39;] = (bike_day.dteday - bike_start_day).dt.days . selected_features = [&quot;temp&quot;, &quot;atemp&quot;, &quot;hum&quot;, &quot;windspeed&quot;] X = bike_day[selected_features] y = bike_day.cnt . Categorical Features . Year . bike_day.yr[bike_day.loc[:, &#39;yr&#39;] == 0] = &#39;2011&#39; bike_day.yr[bike_day.loc[:, &#39;yr&#39;] == 1] = &#39;2012&#39; . &lt;ipython-input-169-fa42af29cf76&gt;:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy bike_day.yr[bike_day.loc[:, &#39;yr&#39;] == 0] = &#39;2011&#39; . X = X.join(pd.get_dummies(bike_day.yr)) . Season . bike_day.season[bike_day.season == 1] = &#39;SPRING&#39; bike_day.season[bike_day.season == 2] = &#39;SUMMER&#39; bike_day.season[bike_day.season == 3] = &#39;FALL&#39; bike_day.season[bike_day.season == 4] = &#39;WINTER&#39; . &lt;ipython-input-171-6a2d6c4210e2&gt;:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy bike_day.season[bike_day.season == 1] = &#39;SPRING&#39; . X = X.join(pd.get_dummies(bike_day.season)) . Weather . bike_day.weathersit[bike_day.weathersit == 1] = &#39;GOOD&#39; bike_day.weathersit[bike_day.weathersit == 2] = &#39;MISTY&#39; bike_day.weathersit[bike_day.weathersit == 3] = &#39;RAIN/SNOW/STORM&#39; . &lt;ipython-input-173-3f30ca62512e&gt;:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy bike_day.weathersit[bike_day.weathersit == 1] = &#39;GOOD&#39; &lt;ipython-input-173-3f30ca62512e&gt;:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy bike_day.weathersit[bike_day.weathersit == 2] = &#39;MISTY&#39; &lt;ipython-input-173-3f30ca62512e&gt;:3: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy bike_day.weathersit[bike_day.weathersit == 3] = &#39;RAIN/SNOW/STORM&#39; . X = X.join(pd.get_dummies(bike_day.weathersit)) . Month . bike_day.mnth[bike_day.mnth == 1] = &#39;JAN&#39; bike_day.mnth[bike_day.mnth == 2] = &#39;FEB&#39; bike_day.mnth[bike_day.mnth == 3] = &#39;MAR&#39; bike_day.mnth[bike_day.mnth == 4] = &#39;APR&#39; bike_day.mnth[bike_day.mnth == 5] = &#39;MAY&#39; bike_day.mnth[bike_day.mnth == 6] = &#39;JUN&#39; bike_day.mnth[bike_day.mnth == 7] = &#39;JUL&#39; bike_day.mnth[bike_day.mnth == 8] = &#39;AUG&#39; bike_day.mnth[bike_day.mnth == 9] = &#39;SEP&#39; bike_day.mnth[bike_day.mnth == 10] = &#39;OCT&#39; bike_day.mnth[bike_day.mnth == 11] = &#39;NOV&#39; bike_day.mnth[bike_day.mnth == 12] = &#39;DEC&#39; . &lt;ipython-input-175-c8d46e89c532&gt;:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy bike_day.mnth[bike_day.mnth == 1] = &#39;JAN&#39; . X = X.join(pd.get_dummies(bike_day.mnth)) . Train test split . from sklearn.model_selection import train_test_split . X_train, X_test, y_train, y_test = train_test_split(X.to_numpy(), y.to_numpy(), train_size = 0.7, random_state = 0) . Training . from sklearn.linear_model import Lasso from sklearn.linear_model import Ridge . Ridge . rr = Ridge() . rr.fit(X_train, y_train) . Ridge() . Lasso . lr = Lasso(normalize=True) . lr.fit(X_train, y_train) . Lasso(normalize=True) . Metrics . from sklearn.metrics import mean_squared_error . Ridge . y_pred_r = rr.predict(X_test) . mean_squared_error(y_test, y_pred_r) . 650836.2490432883 . X.columns . Index([&#39;temp&#39;, &#39;atemp&#39;, &#39;hum&#39;, &#39;windspeed&#39;, &#39;2011&#39;, &#39;2012&#39;, &#39;FALL&#39;, &#39;SPRING&#39;, &#39;SUMMER&#39;, &#39;WINTER&#39;, &#39;GOOD&#39;, &#39;MISTY&#39;, &#39;RAIN/SNOW/STORM&#39;, &#39;APR&#39;, &#39;AUG&#39;, &#39;DEC&#39;, &#39;FEB&#39;, &#39;JAN&#39;, &#39;JUL&#39;, &#39;JUN&#39;, &#39;MAR&#39;, &#39;MAY&#39;, &#39;NOV&#39;, &#39;OCT&#39;, &#39;SEP&#39;], dtype=&#39;object&#39;) . rr.coef_ . array([ 88.65299326, 26.25956829, -20.33643312, -50.15618076, -952.44637897, 952.44637897, 130.84617292, -860.27693577, 51.74908461, 677.68167823, 633.68877124, 356.67526669, -990.36403793, 69.85951888, -99.4768879 , -210.29712617, -80.40426449, -182.14269601, -530.90658858, -130.5165558 , 321.78809344, 372.5871195 , -375.04399105, 255.97861584, 588.57476234]) . rr.intercept_ . 3714.2180369526095 . Lasso . y_pred_l = lr.predict(X_test) . mean_squared_error(y_test, y_pred_l) . 659705.3602256727 . lr.coef_ . array([ 75.4721882 , 33.18143869, -16.0602522 , -43.72313459, -1891.66066957, 0. , -0. , -1045.36789038, 0. , 240.19353283, 283.91218448, -0. , -1414.16952608, 0. , 0. , -0. , -0. , -116.21916793, -301.81738327, -0. , 251.78405948, 273.0091467 , -13.95881047, 504.19655739, 651.96619857]) . lr.intercept_ . 4739.78655994449 . Plot . import altair as alt . alt.Chart(bike_day).mark_line().encode( x = &#39;nday:Q&#39;, y = &#39;hum:Q&#39; ).properties(width=800) .",
            "url": "https://wuhanstudio.github.io/notebooks/jupyter/2020/05/27/iml-lr.html",
            "relUrl": "/jupyter/2020/05/27/iml-lr.html",
            "date": " • May 27, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://wuhanstudio.github.io/notebooks/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://wuhanstudio.github.io/notebooks/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://wuhanstudio.github.io/notebooks/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}